<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
require APPPATH . '/libraries/BaseController.php';
class Domains extends BaseController{
    function __construct()
    {
        parent::__construct();
        $this->load->model('Domain_model');
          $this->isLoggedIn();   
    } 

    /*
     * Listing of domains
     */
    function index()
    {
        $data['domains'] = $this->Domain_model->get_all_domains();
        
        $data['_view'] = 'domains/index';
      //  $this->load->view('layouts/main',$data);
        
        
        
              $this->global['pageTitle'] = 'CodeInsect : Dashboard';
        
        $this->loadViews("domains/index", $this->global, $data , NULL);
    }

    /*
     * Adding a new domains
     */
    function add()
    {   
        $this->load->library('form_validation');

		$this->form_validation->set_rules('domain','Domain','required|max_length[255]');
		$this->form_validation->set_rules('master_ip','Master Ip','required|max_length[100]');
		$this->form_validation->set_rules('slave_ip','Slave Ip','required|max_length[100]');
		$this->form_validation->set_rules('content','Content','required|max_length[200]');
		$this->form_validation->set_rules('url_check','Url Check','required');
		
		if($this->form_validation->run())     
        {   
            $params = array(
				'domain' => $this->input->post('domain'),
				'master_ip' => $this->input->post('master_ip'),
				'slave_ip' => $this->input->post('slave_ip'),
				'content' => $this->input->post('content'),
				'url_check' => $this->input->post('url_check'),
            );
            
            $domains_id = $this->Domain_model->add_domains($params);
            redirect('domains/index');
        }
        else
        {            
            $data['_view'] = 'domains/add';
                    $this->global['pageTitle'] = 'CodeInsect : Dashboard';
            
               $this->loadViews("domains/add", $this->global, $data , NULL);
        }
    }  

    /*
     * Editing a domains
     */
    function edit($id)
    {   
        // check if the domains exists before trying to edit it
        $data['domains'] = $this->Domain_model->get_domains($id);
        
        if(isset($data['domains']['id']))
        {
            $this->load->library('form_validation');

			$this->form_validation->set_rules('domain','Domain','required|max_length[255]');
			$this->form_validation->set_rules('master_ip','Master Ip','required|max_length[100]');
			$this->form_validation->set_rules('slave_ip','Slave Ip','required|max_length[100]');
			$this->form_validation->set_rules('content','Content','required|max_length[200]');
			$this->form_validation->set_rules('url_check','Url Check','required');
		
			if($this->form_validation->run())     
            {   
                $params = array(
					'domain' => $this->input->post('domain'),
					'master_ip' => $this->input->post('master_ip'),
					'slave_ip' => $this->input->post('slave_ip'),
					'content' => $this->input->post('content'),
					'url_check' => $this->input->post('url_check'),
                );

                $this->Domain_model->update_domains($id,$params);            
                redirect('domains/index');
            }
            else
            {
                $data['_view'] = 'domains/edit';
                
                           $this->loadViews("domains/edit", $this->global, $data , NULL);
           
            }
        }
        else
            show_error('The domains you are trying to edit does not exist.');
    } 

    /*
     * Deleting domains
     */
    function remove($id)
    {
        $domains = $this->Domain_model->get_domains($id);

        // check if the domains exists before trying to delete it
        if(isset($domains['id']))
        {
            $this->Domain_model->delete_domains($id);
            redirect('domains/index');
        }
        else
            show_error('The domains you are trying to delete does not exist.');
    }
    
}
